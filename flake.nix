{
  description = "Experimenting with FHE";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    pre-commit-hooks = {
      url = "github:cachix/git-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    inputs@{
      self,
      nixpkgs,
      ...
    }:
    let
      inherit (nixpkgs) lib;
      forAllSystems = lib.genAttrs lib.systems.flakeExposed;
      pkgsFor = forAllSystems (
        system:
        import nixpkgs {
          inherit system;
        }
      );
    in
    {
      checks = forAllSystems (system: {
        pre-commit-check = inputs.pre-commit-hooks.lib.${system}.run {
          src = ./.;
          hooks = {
            end-of-file-fixer.enable = true;
            trim-trailing-whitespace.enable = true;
            check-added-large-files.enable = true;
            check-merge-conflicts.enable = true;
            check-symlinks.enable = true;
            check-docstring-first.enable = true;
            check-builtin-literals.enable = true;
            check-python.enable = true;
            python-debug-statements.enable = true;
            ruff.enable = true;
            ruff-format.enable = true;
            nixfmt-rfc-style.enable = true;
            codespell = {
              enable = true;
              name = "codespell";
              entry = "${pkgsFor.${system}.codespell}/bin/codespell -w --ignore-words-list=FitH --skip=thesis/zusammenfassung.tex";
            };
          };
        };
      });

      # Run the hooks with `nix fmt`.
      formatter = forAllSystems (
        system:
        let
          pkgs = pkgsFor.${system};
          config = self.checks.${system}.pre-commit-check.config;
          inherit (config) package configFile;
          script = ''
            ${pkgs.lib.getExe package} run --all-files --config ${configFile}
          '';
        in
        pkgs.writeShellScriptBin "pre-commit-run" script
      );

      devShells = forAllSystems (
        system:
        let
          pkgs = pkgsFor.${system};
        in
        {
          default = pkgs.mkShell {
            buildInputs =
              with pkgs;
              [
                uv
                cacert
              ]
              ++ self.checks.${system}.pre-commit-check.enabledPackages;
            shellHook = ''
              localOverwriteFile=".pre-commit-config.yaml"
              if ! grep -q "This file was generated by git-hooks.nix" "$localOverwriteFile"; then
                  git update-index --skip-worktree "$localOverwriteFile"
                  rm "$localOverwriteFile"
              fi
              export SSL_CERT_FILE=$NIX_SSL_CERT_FILE
              source .venv/bin/activate
            ''
            + self.checks.${system}.pre-commit-check.shellHook;
          };
        }
      );
    };
}
